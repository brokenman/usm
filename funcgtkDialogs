#!/bin/bash

## ======================================
## gtk_message1
## --------------------------------------
## $1=text
gtk_message1(){
echo '
<window window_position="1" title="'$(gettext "Message")'" icon-name="usm" allow-resize="false">
<vbox>
	<hseparator></hseparator>
	<text><label>"'$1'"</label></text>
	<text><label>""</label></text>
	<hbox>
		<button ok></button>
	</hbox>
</vbox>
</window>
' | gtkdialog -s -c
}; export -f gtk_message1

## ======================================
## gtk_message2
## --------------------------------------
## $1=text
## $2=text
gtk_message2(){
echo '
<window window_position="1" title="'$(gettext "Message")'" icon-name="usm" allow-resize="false">
<vbox>
	<hseparator></hseparator>
	<text><label>"'$1'"</label></text>
	<text><label>""</label></text>
	<text><label>"'$2'"</label></text>
	<hbox>
		<button ok></button>
	</hbox>
</vbox>
</window>
' | gtkdialog -s -c
}; export -f gtk_message2

## ======================================
## gtk_message
## --------------------------------------
## $1=title
## $2=text1
## $3=text2
## $4=stock-icon
## $5=width
gtk_message(){
let twidth=( $5 - 50 )
echo '
<window window_position="1" title="'$(gettext "Message")'" icon-name="usm" allow-resize="false" width-request="'$5'">
<vbox>
	<hbox>
		<pixmap icon_size="5">
			<input file stock="'$4'"></input>
		</pixmap>
		<text use-markup="true" width-request="'$(( $5 - 100 ))'">
			<label>"<span fgcolor='"'red'"' weight='"'bold'"' size='"'x-large'"'> '$1' </span>"</label>
		</text>
	</hbox>
	<hseparator></hseparator>
	<frame>
	<text use-markup="true" wrap="true" width-request="'$(( $5 - 30 ))'"><label>"'$2'"</label></text>
	<text><label>""</label></text>
	<text use-markup="true" wrap="true" width-request="'$(( $5 - 30 ))'"><label>"'$3'"</label></text>
	</frame>
	<text><label>""</label></text>
	<hbox>
		<button ok></button>
	</hbox>
</vbox>
</window>
' | gtkdialog -s -c
}

## ======================================
## gtk_yesno
## --------------------------------------
## $1=text
## $2=text
gtk_yesno(){
echo '
<window window_position="1" title="'$(gettext "Message")'" icon-name="usm" allow-resize="false" icon-name="gtk-dialog-question">
<vbox>
	<hseparator></hseparator>
	<text><label>"'$1'"</label></text>
	<text><label>""</label></text>
	<text><label>"'$2'"</label></text>
	<hbox>
		<button no></button>
		<button yes></button>
	</hbox>
</vbox>
</window>
' | gtkdialog -s -c > $TMPDIR/.yesno
}; export -f gtk_yesno

## ======================================
## gtk_processing
## --------------------------------------
## Shows on top of main window when processing
## to notify user that it will take a long time
gtk_processing(){
export USM_PROCESSING='
<window window_position="1" title="'$(gettext "Processing: ")'" resizable="false" decorated="false">
<vbox>
	<frame>
		<text><label>"'$1'"</label></text>
	</frame>
</vbox>
</window>
'
gtkdialog -p USM_PROCESSING -c
}

## ======================================
## gtk_filelist
## --------------------------------------
## List files in a directory/package
## $1=title
## $2=filein
## $3=directory
gtk_filelist(){
sed -i 's@/tmp/usmunpacked@@g' $TMPDIR/filelist.tmp
echo '
<window window-position="1" title="'$(gettext "File list")'" icon-name="gtk-info" resizable="true" width-request="600" height-request="400" >
	<vbox>
	<vbox scrollable="true">
		<text selectable="true" can-focus="false" xalign="0" yalign="0" width-request="550">
			<label>No file found</label>
			<variable>TXTAREA</variable>
			<input file>"'$2'"</input>
		</text>
	</vbox>
	<hbox>
		<button>
			<label>'$(gettext "Directories")'</label>
			<input file stock="gtk-directory"></input>
			<variable>DIRON</variable>
			<action>find '$3' -type d -name "*" | sed 's@/tmp/usmunpacked@@g' > '$TMPDIR'/filelist.tmp</action>
			<action function="refresh">TXTAREA</action>
		</button>
		<button>
			<label>'$(gettext "Files")'</label>
			<input file stock="gtk-file"></input>
			<variable>FILON</variable>
			<action>find '$3' -type f -name "*" | sed 's@/tmp/usmunpacked@@g' > '$TMPDIR'/filelist.tmp</action>
			<action function="refresh">TXTAREA</action>
		</button>
		<button>
			<label>'$(gettext "Links")'</label>
			<input file stock="gtk-jump-to"></input>
			<variable>FILON</variable>
			<action>find '$3' -type l -name "*" | sed 's@/tmp/usmunpacked@@g' > '$TMPDIR'/filelist.tmp</action>
			<action function="refresh">TXTAREA</action>
		</button>
		<button>
			<label>'$(gettext "Executables")'</label>
			<input file stock="gtk-properties"></input>
			<variable>FILON</variable>
			<action>find '$3' -executable -type f -name "*" | sed 's@/tmp/usmunpacked@@g' > '$TMPDIR'/filelist.tmp</action>
			<action function="refresh">TXTAREA</action>
		</button>
		<button cancel></button>
	</hbox>
	</vbox>
</window>
' | gtkdialog -s

## Remove created files
umount /tmp/usmunpacked 2>/dev/null
rm -rf /tmp/usmunpacked 2>/dev/null
rm $TMPDIR/filelist.tmp
}; export -f gtk_filelist

## ======================================
## gtk_list
## --------------------------------------
## $1=text
## $2=input
gtk_list(){
export LIST_DIALOG='
<window window_position="1" title="USM" icon-name="usm" resizable="true" width-request="500" height-request="400">
<vbox margin="10">	
	<hseparator></hseparator>
	<text><label>"'$1'"</label></text>
	<table>
		<variable>listChosen</variable>
		<input>'$2'</input>
		<action>echo $listChosen > /tmp/.list.tmp</action>
	</table>
	<hbox>
		<button ok></button>
		<button cancel></button>
	</hbox>
</vbox>
</window>
'
gtkdialog -p LIST_DIALOG > /tmp/.list.tmp
egrep "Cancel|abort" /tmp/.list.tmp && rm /tmp/.list.tmp && export ABORT=1
}; export -f gtk_list

## ======================================
## kill_processing
## --------------------------------------
## Close the gtk_processing window above
kill_processing(){ pgrep -f USM_PROCESSING 2>/dev/null && kill `pgrep -f USM_PROCESSING`; }; export -f kill_processing

gtk_aboutusm(){
## ======================================
## gtk_about_usm
## --------------------------------------
## Static about window

cat > $TMPDIR/about.tmp << EOF
$(gettext "USM - A unified package manager for Slackware Linux
Copyright (C) 2014-2020 Jay Flood

This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU General 
Public License as published by the Free Software 
Foundation; either version 2 of the License, or
(at your option) any later version.")

USM Version $USMVERSION

$UPDLINK
EOF

echo '<window window_position="1" title="'$(gettext "About USM")'" resizable="false" width-request="400" icon-name="usm">
<vbox margin="10">
	<hseparator></hseparator>
		<pixmap>
			<input file>/usr/share/icons/hicolor/48x48/apps/usm.png</input>
		</pixmap>
		<text selectable="true" can-focus="false">
			<label>Unified Slackware Package Manager (USM)</label>
			<input file>'$TMPDIR'/about.tmp</input>
		</text>
</vbox>
</window>
'| gtkdialog -s
}; export -f gtk_aboutusm

## ======================================
## prog_counter
## --------------------------------------
## Counter for progress dialog
prog_counter(){
export PCPID=$$
case $STATE in
DOWNLOAD )
while [ A != B ]; do
    if [ -f /tmp/.cdload ]; then M=`cat $TMPDIR/.cdload`; echo "$M"; fi
    sleep 0.3
    [ `grep "99%" $TMPDIR/.progress` ] && echo 1
    i=$(grep -o "[^ ]*%[^ ]*" $TMPDIR/.progress|sed "s/%//g"|tail -n1)
    [ "$i" == "100" ] && i=1
    [ "$i" == "" ] && echo "Waiting ..."|| echo "$i"
    sleep 0.3
done
echo "ALL DONE"
unset STATE
;;
DOWNLOADMULTI )
while [ -f $TMPDIR/proglock ]; do
    if [ ! -f $TMPDIR/.message ]; then echo "`gettext "Waiting ..."`"; else echo "`cat $TMPDIR/.message`"; fi
    [ `egrep "96|97|98|99|100" $TMPDIR/.progress` ] && echo 1
    i=$(grep -o "[^ ]*%[^ ]*" $TMPDIR/.progress|sed "s/%//g"|tail -n1)
    [ "$i" == "100" ] && i=1
    [ "$i" == "" ] && echo "`gettext "Waiting ..."`"|| echo "$i"
    sleep 0.3
done
echo "ALL DONE"
unset STATE
;;
MANUAL )
while [ -f $TMPDIR/proglock ]; do
    MSG=`cat $TMPDIR/.message`
    echo $MSG
    sleep 0.3
done
unset STATE
[ -e $TMPDIR/.message ] && rm $TMPDIR/.message 2>&-
[ -e $TMPDIR/proglock ] && rm $TMPDIR/proglock 2>&-
;;
BUILDMODULE )
while [ -f $TMPDIR/proglock ]; do
    if [ ! -f $TMPDIR/.message ]; then echo "`gettext "Waiting ..."`"; else echo "`cat $TMPDIR/.message`"; fi
    [ `grep "100%" $TMPDIR/.progress` ] && echo 100
    i=$(grep -o "[^ ]*%[^ ]*" $TMPDIR/.progress|sed "s/%//g"|tail -n1)
    [ "$i" != "" ] && echo "$i"
    sleep 0.3
done
echo "100"
unset STATE
rm $TMPDIR/.progress 2>/dev/null
rm $TMPDIR/.message 2>/dev/null
rm $TMPDIR/proglock 2>/dev/null
;;
BUILDMODULES )
## This must be manually killed using kill_process
while [ -f $TMPDIR/proglock ]; do
	if [ ! -f $TMPDIR/.message ]; then echo "`gettext "Waiting ..."`"; else echo "`cat $TMPDIR/.message`"; fi
	[ `grep "100%" $TMPDIR/.progress` ] && echo 1
	i=$(grep -o "[^ ]*%[^ ]*" $TMPDIR/.progress|sed "s/%//g"|tail -n1)
	[ "$i" == "100" ] && i=1
	[ "$i" != "" ] && echo "$i"
	sleep 0.3
done
echo "100"
unset STATE
rm $TMPDIR/.progress 2>/dev/null
rm $TMPDIR/.message 2>/dev/null
rm $TMPDIR/proglock 2>/dev/null
;;
esac

}; export -f prog_counter

## ======================================
## gtk_progress
## --------------------------------------
## Self closing progress bar
gtk_progress(){
export GTK_PROGRESS='
<window title="'$(gettext "Processing: ")'" icon-name="usm" width-request="450">
<vbox>
  <frame>
    <text width-request="310">
      <label>"'$1'"</label>
      <variable>PROGRESS_TXT</variable>
    </text>
    <progressbar visible="true">
      <variable>PROGRESS_BAR</variable>
      <label>...</label>
      <input>prog_counter</input>
      <action>rm '$TMPDIR'/proglock 2>/dev/null</action>
      <action function="exit">PROGRESS_BAR</action>
    </progressbar>
  </frame>
</vbox>
</window>
'
gtkdialog -c -p GTK_PROGRESS 2>/dev/null &
}; export -f gtk_progress

## ======================================
## kill_progress
## --------------------------------------
## Forcefully kill progress dialog
kill_progress() {
unset STATE
myself=`ps ax|egrep "MANUAL_PROGRESS|GTK_PROGRESS"|awk '{print$1}'|head -n1`
for children in `ps -o pid --ppid $myself|sed '/PID/d'`; do
kill $children >/dev/null 2>&-
done
kill $myself >/dev/null 2>&-
}; export -f kill_progress

## ======================================
## gtk_menu_from_variable
## --------------------------------------
## Makes a menu from exported variable list $RESULT
## It returns the choice in $CHOICE
## $1=label
## $2=column heading
gtk_menu_from_variable(){
echo '<window title="'$(gettext "Processing: ")'" icon-name="usm" width-request="450">
<vbox>
	<hseparator></hseparator>
	<text><label>"'$1'"</label></text>
	<tree vscrollbar-policy="1" exported-column="0" selection-mode="1" column-header-active="false">
	  <height>350</height>
	  <variable>CHOICE</variable>
	  <label>"'$2'"</label>
	  <input>echo "$RESULT"|tr " " "\n"</input>
	  <action>echo "CHOICE"</action>
	</tree>
	<hbox>
	  <button ok></button>
	</hbox>
</vbox>
</window>
'|gtkdialog -s -c > $TMPDIR/.menuchoice
CHOICE=`awk -F'"' /CHOICE/'{print$2}' $TMPDIR/.menuchoice`
if [ `grep -o abort $TMPDIR/.menuchoice` ]; then
	## Kill package_get process
	kill `pgrep -f GTK_TAILBOX` 2>/dev/null
	kill `pgrep -f package_get` 2>/dev/null
fi
rm $TMPDIR/.menuchoice
}

## ======================================
## gtk_tailboxnb
## --------------------------------------
## Open a window to tailbox text
## Stream from $TMPDIR/.stream
## $1=height
gtk_tailboxnb(){
export GTK_TAILBOXNB='<window title="'$(gettext "Processing: ")'" icon-name="usm" width-request="450" height-request="'$1'">
<vbox margin="10">
	<hseparator></hseparator>
		<vbox>
		<text file-monitor="true" auto-refresh="true" xalign="0" yalign="0" height-request="'$(( $1 - 30 ))'" vscrollbar-policy="1">
			<variable>txtStream</variable>
			<input file>'$TMPDIR'/.stream</input>
		</text>
		</vbox>
</vbox>
</window>
'
TDUMP=$TMPDIR/tailbox.dmp
gtkdialog -p GTK_TAILBOXNB -c > $TDUMP
if [ -e $TDUMP ]; then
	if [ `grep -o abort $TDUMP` ]; then
		## Kill the package_get process
		kill `pgrep -f package_get` 2>/dev/null
	fi
fi
rm '$TMPDIR'/.stream 2>/dev/null
touch '$TMPDIR'/.stream 2>/dev/null
}; export -f gtk_tailboxnb

## ======================================
## gtk_tailbox
## --------------------------------------
## Open a window to tailbox text
## Stream from $TMPDIR/.stream
## $1=height
gtk_tailbox(){
export GTK_TAILBOXNB='<window title="'$(gettext "Processing: ")'" icon-name="usm" width-request="550" height-request="400">
<vbox margin="10">
	<hseparator></hseparator>
		<vbox vscrollbar-policy="1">
			<text file-monitor="true" auto-refresh="true" xalign="0" yalign="0" 
			scrollable="true" height-request="330" width-request="500">
				<variable>txtStream</variable>
				<input file>/tmp/.stream</input>
			</text>
		</vbox>
		<hbox>
			<button ok></button>
		</hbox>
</vbox>
</window>
'
TDUMP=$TMPDIR/tailbox.dmp
gtkdialog -p GTK_TAILBOXNB -c > $TDUMP
}; export -f gtk_tailbox

## ======================================
## gtk_menu_deselect
## --------------------------------------
## Open a checkbox menu with all options selected
## $1=text
## $2=$TMPDIR/.menudeselect (list of files)
gtk_menu_deselect(){
export MODULES=`awk -F= '/MODULES=/{print$NF}' $CONF`
echo '<window title="'$(gettext "Menu: ")'" icon-name="usm" width-request="450">
	<vbox>
		<text>
			<label>"'$1'"</label>
		</text>
		<vbox scrollable="true">
			'"`for a in $(cat $TMPDIR/.menudeselect); do
				echo '<checkbox>
						<label>'$a'</label>
						<variable>'$a'</variable>
						<default>true</default>
					</checkbox>'; done`"'
			<height>300</height>	
		</vbox>
		<checkbox>
			<variable>chkSubFolder</variable>
			<label>'$(gettext "Create a subfolder")'</label>
			<default>false</default>
		</checkbox>
		'"`if [ -e /etc/porteus-version ]; then
			echo '<checkbox>
			<variable>chkConvert</variable>
			<label>'$(gettext "Convert to modules")'</label>
			<default>'$MODULES'</default>
			<action>if false sed -i 's/MODULES=true/MODULES=false/g' $CONF</action>
			<action>if true sed -i 's/MODULES=false/MODULES=true/g' $CONF</action>
		</checkbox>'; fi`"'
		<hbox>
			<button>
				<label>Download</label>
				<variable>butDownloadPkg</variable>
				<input file stock="gtk-go-down"></input>
				<action function="exit">download</action>
			</button>
			<button cancel></button>
		</hbox>
	</vbox>
</window>
' | gtkdialog -s -c >$TMPDIR/.menudeselect.dmp

## Exit if user canceled
[ `egrep -o "Cancel|abort" $TMPDIR/.menudeselect.dmp` ] && { rm $TMPDIR/{.menudeselect.dmp,.menudeselect}; exit; }
rm $TMPDIR/.menudeselect
}; export -f gtk_menu_deselect

## ======================================================================
## gtk_download
## ----------------------------------------------------------------------
## This function is fed a number from the function 'streamer'
## When it receives number 100 it will exit gracefully
gtk_download(){
export GTK_DOWNLOAD='
<window title="'$(gettext "Downloading: ")'" icon-name="usm" width-request="450">
<vbox>
  <frame>
    <text width-request="310">
      <label>"Downloading"</label>
    </text>
    <progressbar>
		<label>...</label>
		<input>download_progress</input>
		<action function="exit">exited</action>
    </progressbar>
  </frame>
</vbox>
</window>
'
[ ! `pgrep -f GTK_DOWNLOAD` ] && gtkdialog -p GTK_DOWNLOAD -c &
}; export -f gtk_download

## ======================================================================
## download_progress
## ----------------------------------------------------------------------
## This function passes a number to gtk_download. You must start the 
## wget download manually and have it output to $lockit
## using wget $1 -o $lockit
## When this process ends the dialog box will die
download_progress(){
while [ -e $TMPDIR/.progress ]; do
	echo "`cat $TMPDIR/.message`"
	i=`grep --line-buffered -o "[0-9]\+%" $TMPDIR/.progress|tail -n1|sed 's/%//g'`
	[[ `egrep "96%|97%|98%|99%|100%" $TMPDIR/.progress` ]] && i=1
	[ "$i" != "" ] && echo "$i"
	sleep 0.3
done
echo 100
rm $TMPDIR/.message
}; export -f download_progress

## ======================================
## gtk_editFile
## --------------------------------------
## Open a file for reading or editing
## 1=file 2=width 3=height
gtk_editFile(){
export EDITFILE='
<window window_position="1" title="'$(gettext "File editor")'" allow-shrink="false" icon-name="gtk-edit">
<vbox>
	<vbox scrollable="true" width="500" height="400">
		<edit indent="10" sensitive="false">
			<input file>"'$1'"</input>
			<output file>"'$1'"</output>
			<variable>EDITME</variable>
		</edit>
	</vbox>
	<hbox spacing="10">
		<button image-position="0">
			<label>"Edit"</label>
			<input file stock="gtk-edit"></input>
			<action type="Enable">SAVEME</action>
			<action type="Enable">CLEARME</action>
			<action type="Enable">REFRESHME</action>
			<action type="Enable">EDITME</action>
		</button>
		<button image-position="0" tooltip-text="'$(gettext "Clear the data. This is not permanent until saved")'" sensitive="false">
			<label>'$(gettext "Clear")'</label>
			<variable>CLEARME</variable>
			<input file stock="gtk-clear"></input>
			<action type="clear">EDITME</action>
		</button>
		<button image-position="0" tooltip-text="'$(gettext "Reset the original data")'" sensitive="false">
			<label>'$(gettext "Reset")'</label>
			<variable>REFRESHME</variable>
			<input file stock="gtk-refresh"></input>
			<action type="Refresh">EDITME</action>
		</button>
		<button image-position="0" sensitive="false">
			<label>'$(gettext "Save")'</label>
			<variable>SAVEME</variable>
			<input file stock="gtk-save"></input>
			<action type="save">EDITME</action>
		</button>
		<button image-position="0" sensitive="true">
			<label>'$(gettext "Close")'</label>
			<variable>CLOSEME</variable>
			<input file stock="gtk-close"></input>
			<action type="Exit">CLOSED</action>
		</button>
	</hbox>
</vbox>
</window>
'
gtkdialog -p EDITFILE
}; export -f gtk_editFile

## ======================================
## gtk_terminal
## --------------------------------------
## Open a terminal for streaming commands
## 1=file 2=width 3=height
gtk_terminal(){
[ ! -e $TMPDIR/term1.tmp ] && touch $TMPDIR/term1.tmp
export GTK_TERMINAL='<window window_position="1" title="'$(gettext "Terminal")'" allow-shrink="false" icon-name="terminal">
<vbox>
	<terminal argv0="/bin/sh" sensitive="true" file-monitor="true" 
	auto-refresh="true" pointer-autohide="true"
	vscrollbar-policy="2" text-foreground-color="#fff" text-background-color="#000">
		<variable>term1</variable>
		<input file>'$TMPDIR'/term1.tmp</input>
	</terminal>
	<hbox>
		<button>
			<label>Close</label>
			<input file stock="gtk-close"></input>
			<action function="exit">terminated</action>
		</button>
	</hbox>
</vbox>
</window>
'
gtkdialog -p GTK_TERMINAL -c
}; export -f gtk_terminal
