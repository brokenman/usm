#!/bin/bash
export TEXTDOMAIN=usm

# Usm - A unified package manager for Slackware Linux
# Copyright (C) 2014-2020 Jay Flood
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
# If you hear voices telling you otherwise please seek medical
# advice about increasing your medication dosage. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Project Page: http://sourceforge.net/projects/usm
# Jay Flood (aka Brokenman) brokenman@porteus.org

## Check if the script was run directly or called
CALLER=`ps ax | grep "^ *$PPID" | awk '{print $NF}'`
[ `egrep -o "gui" <<<$CALLER` ] && export GUI=0 || export CLI=0

if [ $UID -ne 0 ]; then
	[ $CLI ] && { echo; echo "Only root can do that."; exit; }
	if [ $GUI ]; then
		for a in kdesu gksu gnsu ktsuss; do
			SUHELPER=`which $a 2>/dev/null`
			[ "$SUHELPER" ] &&  break
		done
		[ "$SUHELPER" ] || { xmessage "No su gui found"; exit; }
		$SUHELPER /usr/bin/usmgui &
		exit
	fi
fi

## ======================================================================
## variables
## ======================================================================

TARGET=usm
CONFDIR=/etc/usm
[ -f $CONFDIR/usm-custom.conf ] && CONF=$CONFDIR/usm-custom.conf || CONF=$CONFDIR/usm.conf
VERTXT=$CONFDIR/version.txt
DATADIR=$(awk -F= /PREFIX/'{print$NF}' $CONF)/share/$TARGET
CURRENTUSM=usm-latest-0.0-noarch-1.txz
PIDLOCK=/var/lock/usm.$$
USMPID=$$
GTKDIALOG=gtkdialog
GTKDMIN=0.8.3

## ======================================================================
## includes
## ======================================================================

. $CONF
. $CONFDIR/version.txt
. $DATADIR/funcelementCreate
. $DATADIR/funccleanup
. $DATADIR/funcsystemSetup
. $DATADIR/funccli
. $DATADIR/funcgtkDialogs
. $DATADIR/functxtStatic
. $DATADIR/funcpackageSearch
. $DATADIR/funcpackageInfo
. $DATADIR/funcchecks
. $DATADIR/funcpackageGet
. $DATADIR/funcupdateDatabase
. $DATADIR/funcchangelogs
. $DATADIR/funcslackbuilds
. $DATADIR/funcsystemDeps
. $DATADIR/funcworkhorse

export TMPDIR
export DBDIR
export CONF
export LOCALDB
export PIDLOCK
export USMVERSION
export UPDLINK
export RESOLVE
export STORAGE
export MODULES
export VERTXT
LOCALDB=$DBDIR/local

## These variables are only required in the CLI environment
if [ $CLI ]; then
	TERMC=`tput cols`
	TERML=`tput lines`
fi

## Export only for gui so as not too slow down CLI
if [ $GUI ]; then
	export -f package_search
	export -f package_info
	export -f package_keyword
	export -f package_get
	export -f gtk_processing
	export -f kill_processing
	export -f check_library
	export -f gtk_menu_from_variable
	export -f gtk_message
	export -f gtk_message1
	export -f gtk_message2
	export -f resolve_deps
	export GTKDIALOG
	export GTKDMIN
	export GTKVERSION
	export DBVER
	export USMVER
	export CURRENTUSM
	export CONFDIR
fi

## ======================================================================
## main
## ======================================================================

## Trap exits
trap 'cleanup' 2 14 15

## Set temporary directory and error log
## If tagfile exists then we are re-calling a CLI part of this
## script from the GUI so we don't want to rerun the setup
RECALL=`find /tmp -type f -name ".tag"`
if [ -z $RECALL ]; then
	rm -rf /tmp/usm.* 2>/dev/null
	TMPDIR=$(mktemp -p /tmp -d usm.XXXXXX 2>/dev/null)
	if [ $? -ne 0 ]; then
		TMPFAIL=`gettext "Failed to create temporary directory. Fatal."`
		[ $GUI ] && xmessage "$TMPFAIL" || echo $txtbld "$TMPFAIL" $rst
		exit
	fi
fi

[ $GUI ] && export ERRORLOG=$TMPDIR/error.log || ERRORLOG=$TMPDIR/error.log
DUMP=$TMPDIR/usmdump

## Check that an argument was supplied to CLI
if [ $CLI ]; then
	((!$#)) && pink "`gettext "No argument was supplied."`" && display_usage
	help_check $1 && display_usage
	## If user is running usm -d then set a variable so we can skip database
	## check which will be checked after the initial report from usm -d
	[ "$1" = "-d" ] && SYSTEMDEPS=0
fi

## If user is updating then set variable
[[ `egrep -o "\-u|\-update|\--update|update" <<<$1` ]] && UPDATENOW=0

## If user just wants USM version then get it before system setup
[ `egrep -o "\-v|ver|\--v" <<<$1` ] && \
echo $txtbld "`gettext "You are using USM version:"`" $rst  "$USMVERSION" && \
cleanup

## Prepare the system for takeoff
## If tagfile exists then we are re-calling a CLI part of this
## script from the GUI so we don't want to rerun the setup
[ -z $RECALL ] && system_setup

## Large case for CLI arguments
if [ $CLI ]; then
case $1 in
###################################### UPDATE
-u|-update|--update|update )
## TRANSLATORS: Do not translate <distro>
[ "$2" == "?" ] && help_give "`gettext "usm -u <distro>"`" "`gettext "For example: usm -u slackware"`"
shift
[ ! `egrep -o "slackware|slackwarepatches|slacky|salix|alien|ponce|sbo|usm|all" <<<"$1"` ] && \
help_give "`gettext "usm -u <distro>"`" "`gettext "For example: usm -u slackware"`"
## Remove version check file if exists
[ -e $TMPDIR/vercheck.txt ] && rm $TMPDIR/vercheck.txt

[ "$1" == "sbo" ] && { update_database sbo; cleanup; }
[ "$1" == "slackware" ] && { update_database slackware; cleanup; }
[ "$1" == "slackwarepatches" ] && { update_database slackwarepatches; cleanup; }
[ "$1" == "slacky" ] && { update_database slacky; cleanup; }
[ "$1" == "salix" ] && { update_database salix; cleanup; }
[ "$1" == "alien" ] && { update_database alien; cleanup; }
[ "$1" == "ponce" ] && { update_database ponce; cleanup; }
[ "$1" == "usm" ] && { update_usm; cleanup; }
if [ "$1" == "all" ]; then update_all; fi
cleanup
;;
###################################### SEARCH
-s|-search|--search|search )
help_check $2 && help_give "`gettext "usm -s <package>"`" "`gettext "For example: usm -s imagemagick"`"
shift
check_library $1
package_search $1
cleanup
;;
###################################### INFO
-i|-info|--info|info ) 
if [ -z $2 ]; then
	## Get platform
	if [ -e /etc/porteus-version ] && [ /etc/slackware-version ]; then
		PLATFORM=`cat /etc/porteus-version`
			elif [ /etc/slackware-version ] && [ ! /etc/porteus-version ]; then
		PLATFORM=`cat /etc/slackware-version`
			else
		PLATFORM=UNKNOWN
	fi
	echo "`gettext "++++++++++++++++++++++++++++++"`"
	echo "`gettext "usm application information"`"
	echo
	echo "`gettext "USM version: "`" "$USMVERSION"
	echo "`gettext "DB version: "`" `awk -F= '/DBVER/{print$NF}' $CONF`
	echo "`gettext "Current storage:"`" "$STORAGE"
	echo "`gettext "Current config:"`" "$CONF"
	echo "`gettext "Current platform:"`" "$PLATFORM"
	echo "`gettext "Current arch:"`" "$ARCH"
	echo "`gettext "Slackware"`" "$SLACKVER"
	echo "`gettext "Current kernel"`" `uname -r`
	echo "`gettext "Current distros:"`" "$DISTROS"
	cat /proc/cmdline
	help_give "`gettext "usm -i <package>"`" "`gettext "For example: usm -i imagemagick"`"
		elif [ `egrep "^\-h$|^\-help$|^\--help$|^help$|^\?$" <<<$2` ]; then
	help_give "`gettext "usm -i <package>"`" "`gettext "For example: usm -i imagemagick"`"
fi
package_info $2
cleanup
;;
##################################### SET
-S|-set|--set|set )
help_check $2 && help_give "`gettext "usm set <storage>"`" "`gettext "For example: usm set /root/usm"`"
shift
if [[ `grep -o "/" <<<"$1"` ]]; then
	set_storage "$1"
fi
cleanup
;;
################################### INSTALL
-I|-install|--install|install )
shift
## TRANSLATORS: do not translate 'install'
help_check $1 && help_give "`gettext "usm install <package>"`" "`gettext "For example: usm install /tmp/mypackage-1.2.3-i486-1.txz"`"
slackware_install_package $1
cleanup
;;
################################### GET
-g|-get|--get|get )
shift
[ `egrep -o "\-I|nodeps" <<<$@` ] && { nodeps=0; ARG1=`sed 's/\-I//g' <<<$@|sed 's/^[ \t]*//;s/[ \t]*$//'`; } || ARG1=$1
help_check $ARG1 && help_give "`gettext "usm -g <package>"`" "`gettext "For example: usm -g imagemagick"`"
[ `grep -o nodep <<<$@` ] && export NODEPS=0 || unset NODEPS
[ `grep -o linkso <<<$@` ] && export LINKSONLY=0 || unset links
[ `grep -o noprompt <<<$@` ] && export NOPROMPTS=true
[ `grep -o depth <<<$@` ] && export DEPTH=`grep -o "[^ ]*depth[^ ]*" <<<$@|cut -d= -f2`
package_get $ARG1
cleanup
;;
################################### LIST
-l|-list|--list|list )
shift
[ -z $1 ] && { ls /var/log/packages; cleanup; }
[ "$1" = "?" ] && { "`gettext "usm -l <package>"`" "`gettext "For example: usm -i ethtool"`"; cleanup; }
ls /var/log/packages|grep $1 || echo "`gettext "Nothing found for"`" "$1"
cleanup
;;
################################### DEPS
-d|-deps|--deps|deps )
shift
if [ "$1" = "?" ]||[ "$1" = "-h" ]||[ "$1" = "--help" ]||[ "$1" = "help" ]; then
	echo "`gettext "usm -d"`" "`gettext "For example: usm -d"`"
	echo "`gettext "Search entire system for missing dependencies."`"
	cleanup
fi

## Check if user supplied single package or all
if [ "$1" ]; then
	if [ ! -e $1 ]; then echo $txtbld "`gettext "This is not a valid file."`"; cleanup; fi
	if [ `egrep -o "txz|tgz|xzm" <<<$1` ]; then
		system_deps_package $1
			elif [ `grep -o "/var/log/packages" <<<$1` ]; then
				system_deps_single $1
			else
		system_deps
	fi
else
	system_deps
fi
cleanup end
;;
################################### CHANGELOGS
-c|--c|changelog )
shift
help_check $1 && help_give "`gettext "usm -c <distro>"`" "`gettext "For example: usm -c slackware"`"
changelogs $@
cleanup
;;
################################### BUILD
-b|-build|--build|build )
shift
if [ "$1" = "?" ]||[ "$1" = "-h" ]||[ "$1" = "--help" ]||[ "$1" = "help" ]; then
	echo "`gettext "usm -b"`" "`gettext "For example: usm -b calcoo"`"
	echo "`gettext "Attempt to build package from sources."`"
	cleanup
fi
sbo_search $1
cleanup
;;
################################### BUILD
-k|-keyword|--keyword|key|keyword )
shift
## TRANSLATORS: do not translate lossy compression
help_check $1 && help_give "`gettext "usm -k <keyword>"`" "`gettext "For example: usm -k lossy compression"`"
package_keyword $@
cleanup
;;
################################### SBO
sbo )
SBOTXT=$DBDIR/sbo/SLACKBUILDS.TXT
SBOCATEGS=`awk -F/ /LOCATION:/'{print $(NF-1)}' $SBOTXT |sort -u`
shift
	case "$1:$2" in
		-l:* )  # List categories
		shift
		## $1 should be an SBO category
		[ ! `grep -o "$1" <<<$SBOCATEGS` ] && { echo $txtbld "`gettext "You must enter a valid category."`" $rst ; echo; tr " " "\n" <<<$SBOCATEGS; cleanup; }
		CATPUT=`grep "/$1/" $SBOTXT|awk -F/ '{print$NF}'`
		let TCOLS=( $TERMC+20 )
		for value in $CATPUT; do printf "%-8s\n" "${value}"; done | column -c$TCOLS
		echo
		echo "`gettext "For more information use:"`" $txtbld "usm sbo -i appname" $rst
		;;
		-b:* )
		shift
		help_check $1 && help_give "usm sbo -b appname" "Example: usm sbo -b cueplayer"
		sbo_build $1
		;;
		-s:* )
		shift
		help_check $1 && help_give "usm sbo -s appname" "Example: usm sbo -s cueplayer"
		sbo_search $1
		;;
		-i:* )
		shift
		help_check $1 && help_give "usm sbo -i appname" "Example: usm sbo -i cueplayer"
		sbo_info $1
		;;
	esac
cleanup
;;
* )
echo
echo "`gettext "Invalid command"`"
cleanup
;;
esac
fi # This closes the if [ $CLI ] check above


################################## GTK
if [ $GUI ]; then

export USM_MAIN='
<window window_position="1" title="USM" icon-name="usm" resizable="true">
<vbox>
## ============================================== MENU BAR ================================================
<menubar>

## ==================== TOOLS MENU ==================== ##
	<menu label="'$(gettext "_Tools")'" use-underline="true" icon-name="applications-system">
## <------------------- Package tools shows if running on portues or slackware
	'"`if [ -e /etc/slackware-version ]; then
	echo '<menuitem icon-name="applications-other" tooltip-text="'$(gettext "Various slackware package tools")'">
		<label>'$(gettext "Slackware package tools")'</label>
		<variable>pkgTools</variable>
		<action>echo 1 > /tmp/.toolspage</action>
		<action>packagetools &</action>
	</menuitem>'; fi`"'
	
## <------------------- Module tools shows if running on porteus
	'"`if [ -e /etc/porteus-version ]; then
	echo '<menuitem icon-name="cdr" tooltip-text="'$(gettext "Porteus module tools")'">
		<label>'$(gettext "Porteus module tools")'</label>
		<variable>modTools</variable>
		<action>echo 0 > /tmp/.toolspage</action>
		<action>packagetools &</action>
	</menuitem>'; fi`"'
	
## <------------------- Slackbuilds menu
	<menuitem icon-name="usmslackware" sensitive="false">
		<label>Slackbuilds</label>
		<variable>mensbo</variable>
		<action>echo 2 > '$PIDLOCK'</action>
		<action function="show">butReturn</action>
		<action function="refresh">nbkMain</action>
	</menuitem>
	
	<separator></separator>
	
	<menuitem stock-id="gtk-quit" accel-key="0x51" accel-mods="4">
		<action>exit:Quit</action>
		<variable>men_main_quit</variable>
	</menuitem>
	</menu>

## =================== SETTINGS MENU ================== ##
	<menu label="'$(gettext "_Settings")'" use-underline="true" icon-name="gtk-execute">
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit configuration file")'</label>
		<action>gtk_editFile '$CONF' &</action>
	</menuitem>
	<menuitem icon="gtk-preferences"><label>'$(gettext "Preferences")'</label>
		<action>echo 1 > '$PIDLOCK'</action>
		<action function="hide">butDownload</action>
		<action function="show">butReturn</action>
		<action>refresh:nbkMain</action>
	</menuitem>
	
	<separator></separator>
	
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit alien mirror")'</label>
		<action>gtk_editFile '$CONFDIR/mirrors-alien.txt' &</action>
	</menuitem>
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit salix mirror")'</label>
		<action>gtk_editFile '$CONFDIR/mirrors-salix.txt' &</action>
	</menuitem>
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit slackware mirror")'</label>
		<action>gtk_editFile '$CONFDIR/mirrors-slackware.txt' &</action>
	</menuitem>
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit slacky mirror")'</label>
		<action>gtk_editFile '$CONFDIR/mirrors-slacky.txt' &</action>
	</menuitem>
	<menuitem icon="gtk-edit"><label>'$(gettext "Edit ponce mirror")'</label>
		<action>gtk_editFile '$CONFDIR/mirrors-ponce.txt' &</action>
	</menuitem>
	</menu>

## =================== UPDATE MENU ================== ##
	<menu label="'$(gettext "_Updates")'" use-underline="true" icon-name="gtk-refresh">

	<menuitem icon="usm"><label>'$(gettext "Update USM")'</label>
		<action>update_usm &</action>
	</menuitem>
	
	<menuitemseparator></menuitemseparator>

	'"`for a in slackware slacky salix alien ponce; do echo '
		<menuitem icon="usmslackware"><label>'$(gettext "Update")' '$a' '$(gettext "database")'</label>
		<variable>'$a'</variable>
## <---------------- We need to create a tag file so calling this script again doesnt do setup
		<action>touch '$TMPDIR'/.tag</action>
		<action>gtk_terminal &</action>
		<action>echo "usm -u '$a'" > '$TMPDIR'/term1.tmp</action>
		</menuitem>'; done`"'
		
	<menuitem icon="gtk-refresh"><label>'$(gettext "Update all")'</label>
## <---------------- We need to create a tag file so calling this script again doesnt do setup
		<action>touch '$TMPDIR'/.tag</action>
		<action>gtk_terminal &</action>
		<action>echo "usm -u all" > '$TMPDIR'/term1.tmp</action>
	</menuitem>
	</menu>

## =================== HELP MENU ================== ##
	<menu label="'$(gettext "_Help")'" use-underline="true" icon-name="gtk-info">
	<menuitem icon="gtk-about"><label>'$(gettext "About USM")'</label>
		<action>gtk_aboutusm &</action>
	</menuitem>
	<label>Help</label>
	</menu>
</menubar>


## =================== START NOTEBOOK ================== ##
<notebook page="0" show-tabs="false" show-border="false" labels="main|preferences" space-expand="true" space-fill="true">

###################  PAGE 0  TEXT ########################


## =================== TOP TABLE ================== ##
<vbox space-expand="true" space-fill="true">

## =================== SEARCH AREA ================== ##
<hbox space-expand="false" space-fill="false">
	<entry activates-default="true" space-expand="true" space-fill="true">
		<default>'$(gettext "Enter search term")'</default>
		<variable>entSearch</variable>
	</entry>
	<button can-default="true" has-default="true">
		<label>'$(gettext "Search")'</label>
		<variable>butSearch</variable>
		<action>package_search "$entSearch"</action>
		<action function="clear">tblMain</action>
		<action>refresh:tblMain</action>
	</button>
</hbox>

## =================== RADIO BUTTONS ================== ##
<hbox>
<radiobutton tooltip-text="'$(gettext "Search for a package name")'">
	<action>echo package > $TMPDIR/searchType</action>
'"`rbutCreate rbPackage "$(gettext "Package ")"`"'
<radiobutton tooltip-text="'$(gettext "Search for keywords in the description")'">
	<action>echo keyword > $TMPDIR/searchType</action>
'"`rbutCreate rbKeyword "$(gettext "Keyword ")"`"'
<radiobutton tooltip-text="'$(gettext "Search for the parent of a library")'">
	<action>echo library > $TMPDIR/searchType</action>
'"`rbutCreate rbLibrary "$(gettext "Library ")"`"'

</hbox>
<hbox space-expand="true" space-fill="true">
	<tree exported-column="0" sort-type="0"
		column-header-active="false|false|false|false"
		rules-hint="true">
		<width>600</width>
		<height>150</height>
		<variable>tblMain</variable>
		<label> '$(gettext "File")'                     				                 | '$(gettext "Size")'    | '$(gettext "Repo")'     	   | '$(gettext "Status")' </label>
		<input file>'$TMPDIR'/filelist</input>
		<action signal="cursor-changed">package_info $tblMain</action>
		<action signal="cursor-changed" function="clear">txt0</action>
		<action signal="cursor-changed">refresh:txt0</action>
		<action signal="cursor-changed">enable:butDownload</action>
	</tree>
</hbox>

	<checkbox space-expand="false" space-fill="false">
		<variable>chkDeps</variable>
		<default>'$RESOLVE'</default>
		<label>Resolve dependencies</label>
		<action>if true sed -i 's/RESOLVE=false/RESOLVE=true/g' $CONF</action>
		<action>if false sed -i 's/RESOLVE=true/RESOLVE=false/g' $CONF</action>
	</checkbox>
	
	<hseparator></hseparator>

## =================== TEXT AREA ================== ##
	<text wrap="false" xalign="0" yalign="0"  scrollable="true" height-request="'$TXTBOX'">
		<variable>txt0</variable>
		<label>This is a static text.</label>
		<input file>'$TMPDIR'/welcome</input>
	</text>
## <------ This is an invisible widget so we can choose files from the main menu ------>
	<entry visible="false" fs-action="file">
		<variable>FileChoose</variable>
	</entry>
</vbox>

###################  PAGE 1 PREFERENCES ########################
<vbox>
	<hseparator></hseparator>
	<text use-markup="true"><label>"<span><b>'$(gettext "Settings and Preferences")'</b></span>"</label></text>
	<text><label>""</label></text>
## <-------- PORTEUS ONLY make module
		'"`if [ -e /etc/porteus-version ]; then
		echo '<checkbox tooltip-text="'$(gettext "Always convert packages to modules")'">
			<label>'$(gettext "Convert Slackware packages to Porteus modules.")'</label>
			<default>'$MODULES'</default>
		</checkbox>'; fi`"'
		<checkbox tooltip-text="'$(gettext "Do not show prompt to open target folder. For CLI this means do NOT show any prompts.")'">
			<label>'$(gettext "Disable prompts. Only ask essential questions.")'</label>
			<default>'`awk -F= '/NOPROMPTS=/{print$NF}' $CONF`'</default>
			<action>if true sed -i 's/NOPROMPTS=false/NOPROMPTS=true/g' $CONF</action>
			<action>if false sed -i 's/NOPROMPTS=true/NOPROMPTS=false/g' $CONF</action>
		</checkbox>
		<checkbox tooltip-text="'$(gettext "Disable the automatic update check made when internet is accessed.")'">
			<label>'$(gettext "Enable automatic update checks.")'</label>
			<default>'`awk -F= '/AUTOCHECK=/{print$NF}' $CONF`'</default>
			<action>if true sed -i 's/AUTOCHECK=false/AUTOCHECK=true/g' $CONF</action>
			<action>if false sed -i 's/AUTOCHECK=true/AUTOCHECK=false/g' $CONF</action>
		</checkbox>
	<text><label>""</label></text>
	<frame '$(gettext "Storage directories")'>
		<hbox>
			<text  space-expand="false" space-fill="false" xalign="0" width-request="200"><label>'$(gettext "Download folder: ")'</label></text>
			<entry fs-action="folder" fs-title="'$(gettext "Select a folder")'"
			editable="false" space-expand="true" space-fill="true"
			tooltip-text="'$(gettext "The location where slackware packages will be downloaded.")'">
				<variable>entselDirStorage</variable>
				<default>'$STORAGE'</default>
				<action signal="changed">sed -i 's^STORAGE='$STORAGE'^STORAGE='$entselDirStorage'^g' $CONF</action>
			</entry>
			<button space-expand="false" space-fill="false">
				<label>Select</label>
				<variable>butselDirStorage</variable>
				<action function="fileselect">entselDirStorage</action>
			</button>
		</hbox>
		<hbox>
			<text  space-expand="false" space-fill="false" xalign="0" width-request="200"><label>'$(gettext "Database folder: ")'</label></text>
			<entry fs-action="folder" fs-title="'$(gettext "Select a folder")'"
			editable="false" space-expand="true" space-fill="true"
			tooltip-text="'$(gettext "The location where the slackware databases will be stored.")'">
				<variable>entselDirDb</variable>
				<default>'$DBDIR'</default>
				<action signal="changed">sed -i 's^DBDIR='$DBDIR'^DBDIR='$entselDirDb'^g' $CONF</action>
			</entry>
			<button space-expand="false" space-fill="false">
				<label>Select</label>
				<variable>butselDirDb</variable>
				<action function="fileselect">entselDirDb</action>
			</button>
		</hbox>
		
		<hbox>
			<text  space-expand="false" space-fill="false" xalign="0" width-request="200"><label>'$(gettext "Slackbuilds: ")'</label></text>
			<entry fs-action="folder" fs-title="'$(gettext "Select a folder")'" editable="false" space-expand="true" space-fill="true">
				<variable>entselSboStorage</variable>
				<default>'$SBOTMP'</default>
			</entry>
			<button space-expand="false" space-fill="false">
				<label>Select</label>
				<variable>butselSboStorage</variable>
				<action function="fileselect">entselSboStorage</action>
			</button>
		</hbox>
	</frame>
</vbox>

###################  PAGE 1 SLACKBUILDS ########################

<vbox>
	<hbox space-expand="false" space-fill="false">
## <--------------- SLACKBUILDS SEARCH
		<comboboxtext>
			<variable>cmbsboCategory</variable>
			<input file>'$TMPDIR'/sbo-categories.tmp</input>
		</comboboxtext>
		<entry activates-default="true" space-expand="true" space-fill="true">
			<default>'$(gettext "Enter search term")'</default>
			<variable>entSearchSbo</variable>
		</entry>
		<button can-default="true" has-default="true">
			<label>'$(gettext "Search")'</label>
			<variable>butSearchSbo</variable>
			<action>echo "$entSearchSbo"</action>
			<action function="clear">tblMain</action>
			<action>refresh:tblMain</action>
		</button>
	</hbox>

## <--------------- SLACKBUILDS PACKAGES	
<hbox space-expand="true" space-fill="true">
	<table exported-column="0" sort-function="1"
		column-header-active="false|false|false|false"
		file-monitor="true" auto-refresh="true">
		<width>600</width>
		<height>150</height>
		<variable>tblSbo</variable>
		<label> '$(gettext "File")'                     				                 | '$(gettext "Size")'         | '$(gettext "Repo")'     		    | '$(gettext "Status")' </label>
		<input file>'$TMPDIR'/sbocategs</input>
		<action function="clear">txt0</action>
		<action>refresh:txt0</action>
		<action>enable:butDownload</action>
		<action function="grabfocus">butDownload</action>
	</table>
</hbox>
</vbox>

<variable>nbkMain</variable>
<input file>"'$PIDLOCK'"</input>
</notebook>
## =================== END NOTEBOOK ================== ##

###################### BOTTOM BUTTONS ##########################
<hbox space-expand="false">
	<button visible="false">
		<variable>butReturn</variable>
		<label>'$(gettext "Return")'</label>
		<input file stock="gtk-go-back"></input>
		<action>echo 0 > '$PIDLOCK'</action>
		<action function="show">butDownload</action>
		<action function="hide">butReturn</action>
		<action function="refresh">nbkMain</action>
	</button>
	
	<button sensitive="false" can-default="true">
		<variable>butDownload</variable>
		<label>'$(gettext "Download")'</label>
		<action>package_get $tblMain &</action>
	</button>

	'"`butCreateStock "$(gettext "Cancel")" gtk-cancel`"'
		<action type="exit">Cancel</action>
	</button>
</hbox>

<statusbar has-resize-grip="false">
	<variable>stb0</variable>
	<input>echo "STORAGE: '$(awk -F= '/STORAGE/{print$NF}' $CONF)'"</input>
</statusbar>
		
</vbox>
<action signal="hide">exit:Exit</action>
</window>
'

## Launch
echo "$USM_MAIN"| sed '/^##/d' | gtkdialog -c -s >/dev/null
fi # Closes if [ $GUI ] check above

cleanup
