#!/bin/bash

## =====================================================================
## sbo_search
## ---------------------------------------------------------------------
## Search slackbuilds for a package
function sbo_search(){
echo
local SBOTXT=$DBDIR/sbo/SLACKBUILDS.TXT

## Search for package
RESULT1=`awk /NAME:.*$1.*/'{print$NF}' $SBOTXT`
[[ -z $RESULT1 ]] && { echo "`gettext "Nothing found for"`" "$1"; cleanup; }

## If multiple results are found then ask user
if [ `wc -w <<<$RESULT1` -gt 1 ]; then
    local RESULT=`tr " " "\n" <<<$RESULT1|awk -F: '{print$NF}'`
    menu_from_variable $RESULT
    local RESULT=$CHOICE
else
    RESULT=${RESULT1}
fi
sbo_info $RESULT
}

## =====================================================================
## sbo_info
## ---------------------------------------------------------------------
function sbo_info(){
## Check if this is a secondary search after failing to find the package 
## during the normal usm search

## Search for package
RESULT1=`awk /NAME:.*$1.*/'{print$NF}' $SBOTXT`
[[ -z $RESULT1 ]] && { echo "`gettext "Nothing found for"`" "$1"; cleanup; }

[ "$NSEARCH" ] && echo "`gettext "Nothing was found in Slackware but i found this in slackbuilds."`"
local SBOTXT=$DBDIR/sbo/SLACKBUILDS.TXT
local DESC=`grep -A8 "NAME: $1$" $SBOTXT|tail -n1|awk -F": " '{print$NF}'|sed 's/^ //g'`
local VERS=`grep -A3 "NAME: $1$" $SBOTXT|tail -n1|awk -F": " '{print$NF}'|sed 's/^ //g'`
local CATEG=`grep -A1 "NAME: $1$" $SBOTXT|tail -n1|awk -F/ '{print $(NF-1)}'`
echo
echo "NAME :" $txtbld "$1" $rst
echo "CATEG: $CATEG"
echo "DESC : $DESC"
echo "VERS : $VERS"
echo
read -p "`gettext " Would you like to attempt to build this from source? [y/n]"`" -n 1 -r -s && echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    sbo_build $1
        else
    cleanup
fi
}

## =====================================================================
## sbo_build
## ---------------------------------------------------------------------
## Build a slackbuild package
function sbo_build(){
## Sanity check for at least make
REQAPPS="make"
for a in $REQAPPS; do
    [[ ! `which make cmake 2>/dev/null` ]] && MISSINGAPPS+=($a)
done
if [ ! -z ${MISSINGAPPS[@]} ]; then
    echo
    bold "`gettext "The following programs were not found and are need to continue:"`"
    printf '%s\n' -- "${MISSINGAPPS[@]}"
    cleanup
fi

## Make sure package exists
if [[ ! `grep "NAME: $1$" $SBOTXT` ]]; then
    echo
    echo "`gettext "Nothing found for:"`" "$1"
    echo "`gettext "use:"`" $txtbld "usm sbo -s appname" $rst
    cleanup
fi

## Get link for package	
MLOC=`grep -A8 "NAME: $1$" $SBOTXT|grep "LOCATION:"|awk '{print$NF}'|sed  's ..  '`
TLOC=${MLOC%/*}
local SRCLINK=$REPO_SBO/$SLACKVER/$TLOC/$1.tar.gz
if [ "$ARCH" = "x86_64" ]; then
    DLINK=`awk '/NAME: '$1'$/{c=7}c&&c--' $SBOTXT |awk -F: /DOWNLOAD_x86_64/'{print$NF}'`
    [ -z $DLINK ] && DLINK=`awk '/NAME: '$1'$/{c=7}c&&c--' $SBOTXT |awk /DOWNLOAD:/'{print$NF}'`
        else
    DLINK=`awk '/NAME: '$1'$/{c=7}c&&c--' $SBOTXT |awk /DOWNLOAD:/'{print$NF}'`
fi
local DPKG=${DLINK##*/}

## Get md5sum
if [ "$ARCH" = "x86_64" ]; then
    local SMD5=`grep -A7 "NAME: $1$" $SBOTXT|grep MD5SUM_x86_64:|awk -F: '{print$NF}'|sed 's/ //g'`
fi
[ -z $SMD5 ] && SMD5=`grep -A7 "NAME: $1$" $SBOTXT|grep MD5SUM:|awk -F: '{print$NF}'|sed 's/ //g'`

## Get category
local CATEG=`awk 'c&&c--;/NAME: '$1'$/{c=1}' $SBOTXT |awk -F/ '{print $(NF-1)}'`

## Create a temp directory for storing source files
[ ! -d $SBOTMP ] && mkdir -p $SBOTMP

[ -e $SBOTMP/$1.tar.gz ] && echo "$1.tar.gz exists. Skipping" || download $SRCLINK $SBOTMP
pushd $SBOTMP
if [ ! -d $1 ]; then 
    if [ -e $1.tar.gz ]; then
        tar xf $1.tar.gz || fatality "$SCRIPT $FUNCNAME $LINENO" "`gettext "Could not decompress"`" "$1.tar.gz"
            else
        fatality "$SCRIPT $FUNCNAME $LINENO" "`gettext "Could not decompress"`" "$1.tar.gz"
    fi
fi
cd $1
echo
[ -e $DPKG ] && echo "$DPKG exists. Skipping" || download $DLINK .

## Do and md5sum check on downloaded file
local TMD5=`md5sum $DPKG|awk '{print$1}'`
[ "$TMD5" != "$SMD5" ] && fatality "$SCRIPT $FUNCNAME $LINENO" "`gettext "md5sum mismatch:"`" "$DPKG"

## Check if SlackBuild requires qmake
if [[ `grep -o qmake $1.SlackBuild` ]]; then
    if [[ ! `which qmake 2>/dev/null` ]]; then
        echo
        echo "`gettext "In order to continue you need to install:"`" $txtbld "`find $DBDIR -name "PACKAGES.TXT"|xargs grep "NAME:  qt-[0-9].*\.t.z"|head -n1|awk '{print$NF}'`" $rst
        cleanup
    fi
fi

## Check if SlackBuild requires cmake
if [[ `grep -o cmake $1.SlackBuild` ]]; then
    if [[ ! `which cmake 2>/dev/null` ]]; then
        echo
        echo "`gettext "In order to continue you need to install:"`" $txtbld "cmake" $rst
        cleanup
    fi
fi

## Build the package
chmod +x $1.SlackBuild
## Check if qmake is required
./$1.SlackBuild
popd >/dev/ull
}
